"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[3540],{237:(e,i,t)=>{t.r(i),t.d(i,{data:()=>l});const l={key:"v-34dd33e8",path:"/python/python_basics/slice.html",title:"slice 切片",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 切片 slice",slug:"_1-切片-slice",children:[]},{level:2,title:"2. 单次切片不要同时使用 start, end , stride",slug:"_2-单次切片不要同时使用-start-end-stride",children:[]}],filePathRelative:"python/python_basics/slice.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},7322:(e,i,t)=>{t.r(i),t.d(i,{default:()=>a});const l=(0,t(6252).uE)('<h1 id="slice-切片" tabindex="-1"><a class="header-anchor" href="#slice-切片" aria-hidden="true">#</a> slice 切片</h1><h2 id="_1-切片-slice" tabindex="-1"><a class="header-anchor" href="#_1-切片-slice" aria-hidden="true">#</a> 1. 切片 slice</h2><ol><li>切片可以对list， str， bytes执行</li><li>切片返回新列表，修改不影响原列表</li><li>start 和end 不计较是否越界，自动忽略</li><li>省略0，使用负数切片更简洁</li><li>list赋值时使用切片操作，会影响原有list</li></ol><h2 id="_2-单次切片不要同时使用-start-end-stride" tabindex="-1"><a class="header-anchor" href="#_2-单次切片不要同时使用-start-end-stride" aria-hidden="true">#</a> 2. 单次切片不要同时使用 start, end , stride</h2><ol><li>实现步进式切割，stride = -1可以将字符串反转（unicode编码之后的不适用）</li><li>尽量不要同时指定三个值，不便于理解</li></ol>',5),a={render:function(e,i){return l}}}}]);