"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[8901],{7160:(n,s,a)=>{a.r(s),a.d(s,{data:()=>e});const e={key:"v-58dba385",path:"/python/python_basics/built_in_module/logging.html",title:"python logging",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 等级",slug:"_1-等级",children:[]},{level:2,title:"2. 实践",slug:"_2-实践",children:[]},{level:2,title:"2. 配置",slug:"_2-配置",children:[]},{level:2,title:"3. 遇到的bug",slug:"_3-遇到的bug",children:[]}],filePathRelative:"python/python_basics/built_in_module/logging.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},1284:(n,s,a)=>{a.r(s),a.d(s,{default:()=>l});const e=(0,a(6252).uE)('<h1 id="python-logging" tabindex="-1"><a class="header-anchor" href="#python-logging" aria-hidden="true">#</a> python logging</h1><p>logging可以发送到控制台, 文件, 网络</p><h2 id="_1-等级" tabindex="-1"><a class="header-anchor" href="#_1-等级" aria-hidden="true">#</a> 1. 等级</h2><ul><li>a. logging.CRITICAL</li><li>b. logging.ERROR</li><li>c. logging.WARNING</li><li>d. logging.INFO</li><li>e. logging.DEBUG</li></ul><h2 id="_2-实践" tabindex="-1"><a class="header-anchor" href="#_2-实践" aria-hidden="true">#</a> 2. 实践</h2><ol><li><p>使用<code>__name__</code>作为logger的名称</p><ul><li>便于知道日志来自哪个模块</li></ul></li><li><p>异常捕捉时使用<code>traceback</code>记录</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>  logger.error(&#39;Failed to open file&#39;, exc_info=True)   \n  logger.exception(&#39;Failed to open file&#39;)   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>不要在模块层次创建logger 因为在模块层面获得的logger，在加载了配置文件后都将失效<br> 而应该在使用时获得</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    import logging\n    \n    def foo():\n        logger = logging.getLogger(__name__)\n        logger.info(&#39;Hi, foo&#39;)\n    \n    class Bar(object):\n        def __init__(self, logger=None):\n            self.logger = logger or logging.getLogger(__name__)\n    \n        def bar(self):\n            self.logger.info(&#39;Hi, bar&#39;)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div></li><li><p>使用json或YAML记录配置</p><ol><li>logging.json<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    {\n        &quot;version&quot;: 1,\n        &quot;disable_existing_loggers&quot;: false,  # 如果为True,则模块层面获取的logger都失效\n        &quot;formatters&quot;: {\n            &quot;simple&quot;: {\n                &quot;format&quot;: &quot;%(asctime)s - %(name)s - %(levelname)s - %(message)s&quot;\n            }\n        },\n    \n        &quot;handlers&quot;: {\n            &quot;console&quot;: {\n                &quot;class&quot;: &quot;logging.StreamHandler&quot;,\n                &quot;level&quot;: &quot;DEBUG&quot;,\n                &quot;formatter&quot;: &quot;simple&quot;,\n                &quot;stream&quot;: &quot;ext://sys.stdout&quot;\n            },\n    \n            &quot;info_file_handler&quot;: {\n                &quot;class&quot;: &quot;logging.handlers.RotatingFileHandler&quot;,\n                &quot;level&quot;: &quot;INFO&quot;,\n                &quot;formatter&quot;: &quot;simple&quot;,\n                &quot;filename&quot;: &quot;info.log&quot;,\n                &quot;maxBytes&quot;: 10485760,\n                &quot;backupCount&quot;: 20,\n                &quot;encoding&quot;: &quot;utf8&quot;\n            },\n    \n            &quot;error_file_handler&quot;: {\n                &quot;class&quot;: &quot;logging.handlers.RotatingFileHandler&quot;,\n                &quot;level&quot;: &quot;ERROR&quot;,\n                &quot;formatter&quot;: &quot;simple&quot;,\n                &quot;filename&quot;: &quot;errors.log&quot;,\n                &quot;maxBytes&quot;: 10485760,\n                &quot;backupCount&quot;: 20,\n                &quot;encoding&quot;: &quot;utf8&quot;\n            }\n        },\n    \n        &quot;loggers&quot;: {\n            &quot;my_module&quot;: {\n                &quot;level&quot;: &quot;ERROR&quot;,\n                &quot;handlers&quot;: [&quot;console&quot;],\n                &quot;propagate&quot;: &quot;no&quot;\n            }\n        },\n    \n        &quot;root&quot;: {\n            &quot;level&quot;: &quot;INFO&quot;,\n            &quot;handlers&quot;: [&quot;console&quot;, &quot;info_file_handler&quot;, &quot;error_file_handler&quot;]\n        }\n    }\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br><span class="line-number">46</span><br><span class="line-number">47</span><br><span class="line-number">48</span><br><span class="line-number">49</span><br><span class="line-number">50</span><br><span class="line-number">51</span><br></div></div></li><li>读取json配置<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    import json\n    import logging.config\n    \n    def setup_logging(\n        default_path=&#39;logging.json&#39;, \n        default_level=logging.INFO,\n        env_key=&#39;LOG_CFG&#39;\n    ):\n        &quot;&quot;&quot;Setup logging configuration\n    \n        &quot;&quot;&quot;\n        path = default_path\n        value = os.getenv(env_key, None)\n        if value:\n            path = value\n        if os.path.exists(path):\n            with open(path, &#39;rt&#39;) as f:\n                config = json.load(f)\n            logging.config.dictConfig(config)\n        else:\n            logging.basicConfig(level=default_level)\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li></ol></li></ol><h2 id="_2-配置" tabindex="-1"><a class="header-anchor" href="#_2-配置" aria-hidden="true">#</a> 2. 配置</h2><ol><li>基础配置<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> logging\n\nlogFilename <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>dirname<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;../log/ele.log&#39;</span><span class="token punctuation">)</span>\n\nlog_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>logFilename<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n<span class="token keyword">if</span> <span class="token keyword">not</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    os<span class="token punctuation">.</span>makedirs<span class="token punctuation">(</span>log_dir<span class="token punctuation">)</span>\nlogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>\n    level <span class="token operator">=</span> logging<span class="token punctuation">.</span>DEBUG<span class="token punctuation">,</span>  <span class="token comment"># 定义输出到文件的log级别，</span>\n    <span class="token builtin">format</span> <span class="token operator">=</span> <span class="token string">&#39;%(asctime)s  %(filename)s : %(levelname)s  %(message)s&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 定义输出log的格式</span>\n    datefmt<span class="token operator">=</span> <span class="token string">&#39;%Y-%m-%d %A %H:%M:%S&#39;</span><span class="token punctuation">,</span>  <span class="token comment"># 时间</span>\n    filename <span class="token operator">=</span> logFilename<span class="token punctuation">,</span>  <span class="token comment"># log文件名</span>\n    filemode <span class="token operator">=</span> <span class="token string">&#39;w&#39;</span>\n<span class="token punctuation">)</span>   \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li>日志是线程安全的，但是多进程会有问题，通常解决思路： <ol><li>每个进程单独写一个文件</li><li>使用socketHandler，启一个线程或进程单独处理</li><li>多进程mulitprocessing中的Queue队列存储日志，单独一个进程处理</li></ol></li></ol><h2 id="_3-遇到的bug" tabindex="-1"><a class="header-anchor" href="#_3-遇到的bug" aria-hidden="true">#</a> 3. 遇到的bug</h2><pre><code>1. [多进程+ 多线程 + logging遇到的问题](https://mozillazg.com/2016/09/python-threading-multiprocessing-logging-equal-deadlock.html)\n    1. 主要问题是创建子进程时, 如果使用multiprocessing, 会fork父进程的所有的状态, 此时如果某个线程正在写日志, logging的锁将被fork到子进程中, 导致子进程logging锁无法释,产生死锁\n    2. 解决办法: 使用subprocess, 或只使用多进程+logging\n</code></pre>',10),l={render:function(n,s){return e}}}}]);