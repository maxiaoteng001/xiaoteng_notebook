"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[9457],{7419:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-f06f02fa",path:"/python/python_basics/modules/pycryptodome.html",title:"pycryptodome 模块",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"简介",slug:"简介",children:[]},{level:2,title:"安装",slug:"安装",children:[]},{level:2,title:"1. AES",slug:"_1-aes",children:[]}],filePathRelative:"python/python_basics/modules/pycryptodome.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},6226:(n,s,a)=>{a.r(s),a.d(s,{default:()=>r});var p=a(6252);const e=(0,p._)("h1",{id:"pycryptodome-模块",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#pycryptodome-模块","aria-hidden":"true"},"#"),(0,p.Uk)(" pycryptodome 模块")],-1),t=(0,p._)("h2",{id:"简介",tabindex:"-1"},[(0,p._)("a",{class:"header-anchor",href:"#简介","aria-hidden":"true"},"#"),(0,p.Uk)(" 简介")],-1),o={href:"https://blog.sqreen.com/stop-using-pycrypto-use-pycryptodome/",target:"_blank",rel:"noopener noreferrer"},c=(0,p.Uk)("pycrypto to pycryptodome"),l=(0,p.uE)('<h2 id="安装" tabindex="-1"><a class="header-anchor" href="#安装" aria-hidden="true">#</a> 安装</h2><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 版本影响使用\nsudo pip install pycryptodome==3.9.8\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div><h2 id="_1-aes" tabindex="-1"><a class="header-anchor" href="#_1-aes" aria-hidden="true">#</a> 1. AES</h2><ol><li>demo<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES\n<span class="token keyword">import</span> base64\n\n<span class="token keyword">def</span> <span class="token function">decode_ecs_nio</span><span class="token punctuation">(</span>res<span class="token operator">=</span><span class="token string">&#39;&#39;</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token string">&#39;kcc$[41_fpqxxxxx&#39;</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token comment"># 如果key位数不够, 补齐</span>\n    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>\n        key <span class="token operator">+=</span> <span class="token string">&#39;\\0&#39;</span>\n    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_ECB<span class="token punctuation">)</span>\n    result <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>res<span class="token punctuation">)</span>\n    res_text <span class="token operator">=</span> cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>result<span class="token punctuation">)</span>\n    <span class="token keyword">return</span> res_text\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li><li>AES/CBC/PKCS5Padding加密, CBC加密需要一个十六位的key(密钥)和一个十六位iv(偏移量) <ol><li>Java实现<div class="language-Java ext-Java line-numbers-mode"><pre class="language-Java"><code># 可以发现加密类型, 需要数据块/密码/偏移量/数据字符集 参考nio\n# Cipher instance = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);\npublic static final String a(String str, String str2, String str3) {\n    Intrinsics.b(str2, &quot;key&quot;);\n    Intrinsics.b(str3, &quot;ivValue&quot;);\n    try {\n        byte[] bytes = str2.getBytes(b);\n        Intrinsics.a((Object) bytes, &quot;(this as java.lang.String).getBytes(charset)&quot;);\n        SecretKeySpec secretKeySpec = new SecretKeySpec(bytes, &quot;AES&quot;);\n        Cipher instance = Cipher.getInstance(&quot;AES/CBC/PKCS5Padding&quot;);\n        byte[] bytes2 = str3.getBytes(b);\n        Intrinsics.a((Object) bytes2, &quot;(this as java.lang.String).getBytes(charset)&quot;);\n        instance.init(2, secretKeySpec, new IvParameterSpec(bytes2));\n        byte[] decode = Base64.decode(str, 0);\n        Intrinsics.a((Object) decode, &quot;Base64.decode(str,Base64.DEFAULT)&quot;);\n        byte[] doFinal = instance.doFinal(decode);\n        Intrinsics.a((Object) doFinal, &quot;cipherByte&quot;);\n        return new String(doFinal, b);\n    } catch (Exception e) {\n        return &quot;&quot;;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br></div></div></li><li>Python<div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">import</span> base64\n<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> AES\n<span class="token keyword">from</span> Crypto <span class="token keyword">import</span> Random\n\n<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    pad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span> s <span class="token operator">+</span> <span class="token punctuation">(</span>bs <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> bs<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>bs <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">%</span> bs<span class="token punctuation">)</span>\n    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>\n    data <span class="token operator">=</span> cipher<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>pad<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    data <span class="token operator">=</span> iv <span class="token operator">+</span> data\n    <span class="token keyword">return</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n\n<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> key<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    bs <span class="token operator">=</span> AES<span class="token punctuation">.</span>block_size\n    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> bs<span class="token punctuation">:</span>\n        <span class="token keyword">return</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span>\n    unpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s <span class="token punctuation">:</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    cipher <span class="token operator">=</span> AES<span class="token punctuation">.</span>new<span class="token punctuation">(</span>data<span class="token punctuation">,</span> AES<span class="token punctuation">.</span>MODE_CBC<span class="token punctuation">,</span> iv<span class="token punctuation">)</span>\n    data  <span class="token operator">=</span> unpad<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>\n    <span class="token keyword">return</span> data\n\n<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span>\n    data <span class="token operator">=</span> <span class="token string">&#39;d437814d9185a290af20514d9341b710&#39;</span>\n    password <span class="token operator">=</span> <span class="token string">&#39;78f40f2c57eee727a4be179049cecf89&#39;</span> <span class="token comment">#16,24,32位长的密码</span>\n    encrypt_data <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>data<span class="token punctuation">,</span> password<span class="token punctuation">)</span>\n    encrypt_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encrypt_data<span class="token punctuation">)</span>\n    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;encrypt_data:&#39;</span><span class="token punctuation">,</span> encrypt_data<span class="token punctuation">)</span>\n\n\n    encrypt_data <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>encrypt_data<span class="token punctuation">)</span>\n    decrypt_data <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>encrypt_data<span class="token punctuation">,</span> password<span class="token punctuation">)</span>\n    <span class="token keyword">print</span> <span class="token punctuation">(</span><span class="token string">&#39;decrypt_data:&#39;</span><span class="token punctuation">,</span> decrypt_data<span class="token punctuation">)</span>\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br></div></div></li></ol></li></ol>',4),r={render:function(n,s){const a=(0,p.up)("OutboundLink");return(0,p.wg)(),(0,p.iD)(p.HY,null,[e,t,(0,p._)("p",null,[(0,p._)("a",o,[c,(0,p.Wm)(a)])]),l],64)}}}}]);