"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[5347],{6528:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-7a2af72e",path:"/python/python_web/web_nginx.html",title:"WEB服务器Nginx",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 概述",slug:"_1-概述",children:[]},{level:2,title:"2. 使用",slug:"_2-使用",children:[]},{level:2,title:"3. 其他",slug:"_3-其他",children:[]}],filePathRelative:"python/python_web/web_nginx.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},6336:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(6252).uE)('<h1 id="web服务器nginx" tabindex="-1"><a class="header-anchor" href="#web服务器nginx" aria-hidden="true">#</a> WEB服务器Nginx</h1><h2 id="_1-概述" tabindex="-1"><a class="header-anchor" href="#_1-概述" aria-hidden="true">#</a> 1. 概述</h2><ol><li><p>web服务器和应用服务器的区别</p><ul><li>web服务器负责处理HTTP协议</li><li>web服务器用于处理静态页面的内容, 对于python产生的动态内容,通过WSGI接口交给应用服务器来处理</li><li>一般应用服务器都集成了web服务器</li></ul><p>尽管集成了web服务器, 但大部分用来做调试, 出于性能和稳定性的考虑,并不能在生产环境中使用.</p></li><li><p>为什么选择Nginx</p><ul><li>处理静态文件,索引文件效率非常高</li><li>高并发连接</li><li>低的内存损耗</li><li>强大的反响代理和负载均衡功能,平衡集群中各个服务器的负载压力</li></ul></li></ol><h2 id="_2-使用" tabindex="-1"><a class="header-anchor" href="#_2-使用" aria-hidden="true">#</a> 2. 使用</h2><ol><li><p>安装</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo yum install nginx\nsudo systemctl status nginx # 查看当前状态\nsudo systemctl start nginx # 查看当前状态\nsudo systemctl stop nginx # 查看当前状态\nsudo systemctl enable nginx  # 设置开机自启动\nsudo systemctl restart nginx  # 重启nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br></div></div></li><li><p>配置</p><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 好的习惯是先检查配置文件,再重启服务器\nsudo nginx -t  # 验证Nginx配置是否正确\n\n# 修改配置文件后的重载\nsudo nginx -s reload\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li><p>配置文件</p><ol><li>配置目录<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 查找主配置文件, 里面包含日志文件路径和子配置文件路径\n# 优先配置方案参考https://serverfault.com/questions/527630/what-is-the-different-usages-for-sites-available-vs-the-conf-d-directory-for-ngi\nfind / -name nginx.conf\n# 子路径配置文件\n/etc/nginx/conf.d/*.conf\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li><li>配置文件demo<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># nginx.conf\nuser root;\nworker_processes  1;\nerror_log  /var/log/nginx/error.log warn;\npid        /var/run/nginx.pid;\nevents {\n    worker_connections  1024;\n}\nhttp {\n    include       /etc/nginx/mime.types;\n    default_type  application/octet-stream;\n\n    log_format  main  &#39;$remote_addr - $remote_user [$time_local] &quot;$request&quot; &#39;\n                    &#39;$status $body_bytes_sent &quot;$http_referer&quot; &#39;\n                    &#39;&quot;$http_user_agent&quot; &quot;$http_x_forwarded_for&quot;&#39;;\n\n    access_log  /var/log/nginx/access.log  main;\n\n    sendfile        on;\n    #tcp_nopush     on;\n\n    keepalive_timeout  65;\n\n    #gzip  on;\n\n    include /etc/nginx/conf.d/*.conf;\n}\n# 子配置文件\nserver {\n    charset utf-8;\n    listen 80;\n    server_name book.maxiaoteng.xyz;\n    server_name book.maxiaoteng.tk;\n\n    # 重定向\n    rewrite  ^/(.*)$  https://maxiaoteng001.github.io/maxiaoteng-book/$1 permanent;\n\n    # 代理\n    location /static {\n        alias /var/www/mxt_blogs_project/static; \n    }\n    location / {\n        proxy_pass http://localhost:4000;\n    }\n}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br><span class="line-number">38</span><br><span class="line-number">39</span><br><span class="line-number">40</span><br><span class="line-number">41</span><br><span class="line-number">42</span><br><span class="line-number">43</span><br><span class="line-number">44</span><br><span class="line-number">45</span><br></div></div></li></ol></li><li><p>日志位置</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>/var/log/nginx\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol><h2 id="_3-其他" tabindex="-1"><a class="header-anchor" href="#_3-其他" aria-hidden="true">#</a> 3. 其他</h2><ol><li><p>什么时候选择源码安装？二进制包安装和源码安装应用场景:</p><ul><li>对软件精简度有要求, 性能非常高的要求</li><li>源码安装自由度高</li><li>对软件打过补丁</li><li>源码安装提供了统一的安装方式,可以跨平台应用</li></ul></li><li><p>反向代理和正向代理<br> 通常部署web应用的时候, 都会选择一个叫做WSGI的应用服务器,搭配Nginx来使用</p><ul><li>正向代理: 作为一个媒介将互联网获取的资源返回给相关联的客户端, 代理和客户端在一个局域网,对于服务端是透明的</li><li>反向代理: 根据客户端的请求, 从后端的服务器上获取资源, 然后再将这些资源返回给客户端. 代理和服务器在一个局域网,对客户端是透明的.</li></ul></li><li><p>反向代理的作用</p><ul><li>提高动态语言的I/O处理能力</li><li>加密和SSL加速</li><li>安全</li><li>负载均衡</li><li>缓存静态内容</li><li>支持压缩</li></ul></li><li><p>负载均衡算法</p><ol><li>round-robin # 按请求顺序依次分配, 如果某台服务器自动宕机,自动剔除</li><li>least_conn # 请求发送到活跃连接最少的服务器上</li><li>ip_hash # 按ip的hash值分配</li><li>hash</li></ol></li><li><p>通过Gunicorn启动Flask应用</p></li><li><p>nginx代理出现502</p><ol><li>检查日志发现<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># log文件显示\n15 connect() to 127.0.0.1:2018 failed (13: Permission denied) while connecting to upstream\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li>解决办法: <ul><li>关闭selinux</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>sudo vim /etc/selinux/config\n# 将SELINUX=enforcing改为SELINUX=disabled\n重启即可\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><ul><li>临时解决:</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>setenforce 0\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li></ol></li></ol>',7),l={render:function(n,s){return a}}}}]);