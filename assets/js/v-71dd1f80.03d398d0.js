"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[8749],{5675:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-71dd1f80",path:"/python/python_basics/decorators.html",title:"Decorators 装饰器",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 闭包",slug:"_1-闭包",children:[]},{level:2,title:"2. 装饰器",slug:"_2-装饰器",children:[]}],filePathRelative:"python/python_basics/decorators.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},2437:(n,s,a)=>{a.r(s),a.d(s,{default:()=>t});const p=(0,a(6252).uE)('<h1 id="decorators-装饰器" tabindex="-1"><a class="header-anchor" href="#decorators-装饰器" aria-hidden="true">#</a> Decorators 装饰器</h1><p>主要还是利用了Python能够接收和返回函数的功能</p><h2 id="_1-闭包" tabindex="-1"><a class="header-anchor" href="#_1-闭包" aria-hidden="true">#</a> 1. 闭包</h2><ol><li><p>实例</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token keyword">def</span> <span class="token function">zoo</span><span class="token punctuation">(</span>acount<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">def</span> <span class="token function">_inner</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span>acount<span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> _inner\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div></li></ol><h2 id="_2-装饰器" tabindex="-1"><a class="header-anchor" href="#_2-装饰器" aria-hidden="true">#</a> 2. 装饰器</h2><ol><li><p>实例</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token comment">## 定义一个装饰器, 将原来函数的参数输出一下, 就用到了所有情况</span>\n    <span class="token keyword">def</span> <span class="token function">demo</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">def</span> <span class="token function">_warpper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;我是装饰器demo的功能&#39;</span><span class="token punctuation">)</span>\n            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;输出的args和kwargs来自被装饰函数, args:{},kwargs: {} &#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span><span class="token punctuation">)</span>\n            func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>\n\n        <span class="token keyword">return</span> _warpper\n\n    <span class="token comment"># 使用</span>\n    <span class="token decorator annotation punctuation">@demo</span>\n    <span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>\n        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;来自原始函数&#39;</span><span class="token punctuation">,</span> args<span class="token punctuation">,</span> kwargs<span class="token punctuation">)</span>\n\n    <span class="token comment"># 测试</span>\n    func<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> name<span class="token operator">=</span><span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span> <span class="token operator">**</span><span class="token punctuation">{</span><span class="token string">&quot;age&quot;</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span><span class="token punctuation">)</span>\n    <span class="token operator">&gt;&gt;</span>  我是装饰器demo的功能\n        输出的args和kwargs来自被装饰函数<span class="token punctuation">,</span> args<span class="token punctuation">:</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">,</span>kwargs<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span>\n        来自原始函数 <span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token string">&#39;name&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;mm&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;age&#39;</span><span class="token punctuation">:</span> <span class="token number">8</span><span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br></div></div></li></ol>',6),t={render:function(n,s){return p}}}}]);