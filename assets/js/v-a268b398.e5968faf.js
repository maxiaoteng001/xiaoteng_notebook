"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[6062],{2734:(l,i,e)=>{e.r(i),e.d(i,{data:()=>a});const a={key:"v-a268b398",path:"/python/python_web/restful.html",title:"Restful API",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. SOAP 和 RESTful架构",slug:"_1-soap-和-restful架构",children:[]},{level:2,title:"2. 如何设计RESTful API",slug:"_2-如何设计restful-api",children:[]}],filePathRelative:"python/python_web/restful.md",git:{updatedTime:1631945801e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:2}]}}},1839:(l,i,e)=>{e.r(i),e.d(i,{default:()=>c});var a=e(6252);const n=(0,a.uE)('<h1 id="restful-api" tabindex="-1"><a class="header-anchor" href="#restful-api" aria-hidden="true">#</a> Restful API</h1><p>核心是面向资源 所有事务都可以抽象为资源 每个资源都有唯一标识</p><p>资源: 歌曲,文章,文本,视频</p><h2 id="_1-soap-和-restful架构" tabindex="-1"><a class="header-anchor" href="#_1-soap-和-restful架构" aria-hidden="true">#</a> 1. SOAP 和 RESTful架构</h2><ol><li>效率和易用性, soap易用性差</li><li>安全性方面: RESTful使用安全要求不高的资源型服务接口.</li></ol><h2 id="_2-如何设计restful-api" tabindex="-1"><a class="header-anchor" href="#_2-如何设计restful-api" aria-hidden="true">#</a> 2. 如何设计RESTful API</h2>',6),t=(0,a._)("p",null,"资源路径",-1),s=(0,a.Uk)("资源常用复数 "),o={href:"https://api.example.com/v1/posts",target:"_blank",rel:"noopener noreferrer"},p=(0,a.Uk)("https://api.example.com/v1/posts"),r=(0,a.Uk)(" // 博客资源"),u=(0,a.uE)('<li><p>HTTP动词</p><ol><li>GET <ul><li>/posts/ID</li></ul></li><li>POST <ul><li>/posts</li></ul></li><li>PUT / PATCH 都是update <ul><li>幂等性, 多次请求结果一致</li><li>PUT 要求幂等性, 如果位置不存在,则创建一个, 要求带有完整的信息</li><li>PATCH 不是幂等的, 如果位置不存在,则出现错误, 也不会自动重新尝试失败的请求</li><li>/posts/ID</li></ul></li><li>DELETE <ul><li>/posts/ID</li></ul></li></ol></li><li><p>过滤信息</p><ol><li>api提供参数进行筛选 <ul><li>?offset=10</li><li>?page=2&amp;per_page=100</li><li>?sortby=name&amp;order=asc</li><li>?post_id=1</li></ul></li></ol></li><li><p>状态码</p><ol><li><p>成功状态码</p><ol><li>200 OK 服务器成功返回用户请求的数据</li><li>201 CREATED 新建或修改数据成功</li><li>204 NO CONTENT 删除数据成功</li></ol></li><li><p>客户端请求有问题</p><ol><li>400 BAD REQUEST 用户发出的请求有错误</li><li>401 Unauthorized 表示用户没有认证,无法进行当前操作</li><li>403 Forbidden 表示当前用户访问是被禁止的</li><li>422 Unprocesable Entity 表示当创建一个对象时,发生一个验证错误</li></ol></li><li><p>服务端错误</p><ol><li>500 INTERNAL SERVER ERROR 服务器发生错误,用户将无法判断发出的请求是否成功</li></ol></li></ol></li><li><p>错误处理</p><ol><li>响应提示</li></ol><div class="language-json ext-json line-numbers-mode"><pre class="language-json"><code>    <span class="token punctuation">{</span>\n        <span class="token property">&quot;error&quot;</span><span class="token operator">:</span> <span class="token string">&quot;参数错误&quot;</span>\n    <span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>返回结构</p><ol><li>GET /collections 返回资源对象的列表</li><li>GET /collections/identity 返回单个资源对象</li><li>POST /collections 返回新生成的资源对象</li><li>PUT /collections/identity 返回完整的资源对象</li><li>PATCH /collections/identity 返回被修改的属性</li><li>DELETE /collections/identity 返回一个空文档</li></ol></li>',5),c={render:function(l,i){const e=(0,a.up)("OutboundLink");return(0,a.wg)(),(0,a.iD)(a.HY,null,[n,(0,a._)("ol",null,[(0,a._)("li",null,[t,(0,a._)("ol",null,[(0,a._)("li",null,[s,(0,a._)("ul",null,[(0,a._)("li",null,[(0,a._)("a",o,[p,(0,a.Wm)(e)]),r])])])])]),u])],64)}}}}]);