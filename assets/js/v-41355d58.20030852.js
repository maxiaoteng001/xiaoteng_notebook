"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[5520],{134:(n,e,s)=>{s.r(e),s.d(e,{data:()=>a});const a={key:"v-41355d58",path:"/python/python_basics/iteration_generator_iterable.html",title:"迭代器 生成器 可迭代对象",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"python/python_basics/iteration_generator_iterable.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},506:(n,e,s)=>{s.r(e),s.d(e,{default:()=>l});const a=(0,s(6252).uE)('<h1 id="迭代器-生成器-可迭代对象" tabindex="-1"><a class="header-anchor" href="#迭代器-生成器-可迭代对象" aria-hidden="true">#</a> 迭代器 生成器 可迭代对象</h1><p>Iteration Generator Iterable</p><ol><li><p>Iterator</p><ul><li>可迭代对象有 <code>__iter__</code> 方法</li><li>迭代器是在可迭代对象基础上, 加<code>__next__</code> 方法</li><li>Python中 string, list, dict, tuple, deque都是可迭代操作的, 但不是迭代器</li></ul></li><li><p>Generator</p><ol><li>列表生成器 set，list， dict都适用<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>    a = [1, 2, 3, 4, 5, 6]\n    squares = [x ** 2 for x in a]\n    even_squares = [x ** 2 for x in a if x % 2 == 0]\n\n    # 矩阵\n    matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]\n    flat = [x for x in row for row in matrix]\n    &gt;&gt; flat = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n    squared = [[x ** 2 for x in row] for row in matrix]\n    &gt;&gt; squared = [[1, 4, 9], [16, 25, 36], [49, 64, 81]]\n\n    # 再复杂的结构，建议使用for循环\n    \n    # 列表推到每个值都要创建一个全新列表，占用大量内存\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br></div></div></li><li>两种生成方法 <ol><li>生成器就是把[] 换成 ()</li></ol><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>g = (x * x for x in range(10))\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><ol><li>实现yield函数<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code># 实现了yield的函数\ndef mygen(n):\n    now = 0\n    while now &lt; n:\n        yield now\n        now += 1\n\nif __name__ == &#39;__main__&#39;:\n    gen = mygen(10)\n    print(isinstance(gen, Generator))  # True\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br></div></div></li></ol></li><li>激活生成器 <ol><li>next(g)</li><li>generator.send(None)</li></ol></li><li>生成器的四种状态<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>GEN_CREATED # 等待开始执行\nGEN_RUNNING # 解释器正在执行（只有在多线程应用中才能看到这个状态）\nGEN_SUSPENDED # 在yield表达式处暂停\nGEN_CLOSED # 执行结束\n\nfrom inspect import getgeneratorstate\n\ndef mygen(n):\n    now = 0\n    while now &lt; n:\n        yield now\n        now += 1\n\nif __name__ == &#39;__main__&#39;:\n    gen = mygen(2)\n    print(getgeneratorstate(gen))  # GEN_CREATED\n\n    print(next(gen))\n    print(getgeneratorstate(gen))  # GEN_SUSPENDED\n\n    print(next(gen))\n    gen.close()  # 手动关闭/结束生成器\n    print(getgeneratorstate(gen))   # GEN_CLOSED\n\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br></div></div></li><li>生成器的异常状态 抛出: StopIteration</li></ol></li><li><p>Iterable <code>collections.Iterable</code> 可迭代对象</p><ol><li>生成器(generator)</li><li>string, list, dict, tuple, deque...</li></ol></li></ol>',3),l={render:function(n,e){return a}}}}]);