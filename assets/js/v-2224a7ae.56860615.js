"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[2346],{3712:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-2224a7ae",path:"/python/python_web/celery/",title:"Celery",lang:"en-US",frontmatter:{},excerpt:"",headers:[],filePathRelative:"python/python_web/celery/index.md",git:{updatedTime:1631945801e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:2}]}}},5864:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="celery" tabindex="-1"><a class="header-anchor" href="#celery" aria-hidden="true">#</a> Celery</h1><p>Distributed Task Queue</p><ol><li><p>Choosing a Broker</p><ol><li>Redis</li><li>Rebbit MQ</li></ol></li><li><p>Installing Celery</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>pip <span class="token function">install</span> celery\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>Application</p><ol><li><p>app线程安全</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery\napp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;pyamqp://guest@localhost//&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># redis, broker读取任务</span>\napp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;redis://localhost&#39;</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>\n<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br></div></div></li></ol></li><li><p>Keeping Results 为了追踪任务状态, celery需要存储和发送任务状态, backend可选( SQLAlchemy/Django ORM, MongoDB, Memcached, Redis, RPC (RabbitMQ/AMQP))</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code><span class="token keyword">from</span> celery <span class="token keyword">import</span> Celery\napp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> backend<span class="token operator">=</span><span class="token string">&#39;redis://localhost&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;pyamqp://guest@localhost//&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># redis, broker读取任务, backend</span>\napp <span class="token operator">=</span> Celery<span class="token punctuation">(</span><span class="token string">&#39;tasks&#39;</span><span class="token punctuation">,</span> backend<span class="token operator">=</span><span class="token string">&#39;redis://localhost&#39;</span><span class="token punctuation">,</span> broker<span class="token operator">=</span><span class="token string">&#39;redis://localhost&#39;</span><span class="token punctuation">)</span>\n<span class="token decorator annotation punctuation">@app<span class="token punctuation">.</span>task</span>\n<span class="token keyword">def</span> <span class="token function">add</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>\n    <span class="token keyword">return</span> x <span class="token operator">+</span> y\n<span class="token comment"># 对于结果调用</span>\n<span class="token comment"># delay调用, 返回异步结果</span>\nresult <span class="token operator">=</span> add<span class="token punctuation">.</span>delay<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span>\nresult<span class="token punctuation">.</span><span class="token builtin">id</span>    <span class="token comment"># 任务id</span>\nresult<span class="token punctuation">.</span>ready<span class="token punctuation">(</span><span class="token punctuation">)</span>\nresult<span class="token punctuation">.</span>get<span class="token punctuation">(</span>timeout<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>\n<span class="token comment"># 异常处理, 如果有异常, 调用get也会返回异常</span>\nresult<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 直接抛出异常</span>\nresult<span class="token punctuation">.</span>get<span class="token punctuation">(</span>propagate<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span> <span class="token comment"># 只返回异常名, 不返回完整的调用栈</span>\nresult<span class="token punctuation">.</span>traceback    <span class="token comment"># 查看完整的调用栈</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br></div></div></li><li><p>Configuration</p><ol><li><p>硬编码配置</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>app<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>task_serializer <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>\napp<span class="token punctuation">.</span>conf<span class="token punctuation">.</span>update<span class="token punctuation">(</span>\n    task_serializer<span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n    accept_content<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment"># Ignore other content</span>\n    result_serializer<span class="token operator">=</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">,</span>\n    timezone<span class="token operator">=</span><span class="token string">&#39;Europe/Oslo&#39;</span><span class="token punctuation">,</span>\n    enable_utc<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>\n<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br></div></div></li><li><p>配置文件</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>app<span class="token punctuation">.</span>config_from_object<span class="token punctuation">(</span><span class="token string">&#39;celeryconfig&#39;</span><span class="token punctuation">)</span>\n<span class="token comment"># celeryconfig.py</span>\nbroker_url <span class="token operator">=</span> <span class="token string">&#39;pyamqp://&#39;</span>\nresult_backend <span class="token operator">=</span> <span class="token string">&#39;rpc://&#39;</span>\ntask_serializer <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>\nresult_serializer <span class="token operator">=</span> <span class="token string">&#39;json&#39;</span>\naccept_content <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;json&#39;</span><span class="token punctuation">]</span>\ntimezone <span class="token operator">=</span> <span class="token string">&#39;Europe/Oslo&#39;</span>\nenable_utc <span class="token operator">=</span> <span class="token boolean">True</span>\n<span class="token comment"># python -m celeryconfig.py 检查配置文件准确</span>\n<span class="token comment"># 特定队列的配置</span>\ntask_routes <span class="token operator">=</span> <span class="token punctuation">{</span>\n    <span class="token string">&#39;tasks.add&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;low-priority&#39;</span><span class="token punctuation">,</span>\n    <span class="token string">&#39;tasks.add&#39;</span><span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token string">&#39;rate_limit&#39;</span><span class="token punctuation">:</span> <span class="token string">&#39;10/m&#39;</span><span class="token punctuation">}</span> <span class="token comment"># 每分钟处理10个任务</span>\n<span class="token punctuation">}</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br></div></div></li></ol></li><li><p>启动worker</p><div class="language-Shell ext-Shell line-numbers-mode"><pre class="language-Shell"><code>celery -A tasks worker --loglevel=INFO\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div></li><li><p>other</p></li></ol>',3),e={render:function(n,s){return p}}}}]);