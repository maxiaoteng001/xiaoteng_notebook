"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[8609],{1609:(n,s,a)=>{a.r(s),a.d(s,{data:()=>p});const p={key:"v-4f0409c0",path:"/python/python_basics/tips.html",title:"Tips",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 字符串",slug:"_1-字符串",children:[]},{level:2,title:"2. list (append extend)",slug:"_2-list-append-extend",children:[]},{level:2,title:"3. 保存图片",slug:"_3-保存图片",children:[]},{level:2,title:"4. 包的导入",slug:"_4-包的导入",children:[]},{level:2,title:"5. 生成随机数",slug:"_5-生成随机数",children:[]},{level:2,title:"6. 加密",slug:"_6-加密",children:[]},{level:2,title:"7. del",slug:"_7-del",children:[]},{level:2,title:"8. Python执行Shell命令",slug:"_8-python执行shell命令",children:[]},{level:2,title:"9. enumerate 代替range",slug:"_9-enumerate-代替range",children:[]},{level:2,title:"10. zip平行遍历多个迭代器",slug:"_10-zip平行遍历多个迭代器",children:[]}],filePathRelative:"python/python_basics/tips.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},1728:(n,s,a)=>{a.r(s),a.d(s,{default:()=>e});const p=(0,a(6252).uE)('<h1 id="tips" tabindex="-1"><a class="header-anchor" href="#tips" aria-hidden="true">#</a> Tips</h1><h2 id="_1-字符串" tabindex="-1"><a class="header-anchor" href="#_1-字符串" aria-hidden="true">#</a> 1. 字符串</h2><ol><li><p>format %</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;percent: {:.2%}&#39;</span>.format<span class="token punctuation">(</span><span class="token number">42</span>/50<span class="token punctuation">))</span>\n    percent: <span class="token number">84.00</span>%\n    <span class="token operator">&gt;&gt;</span><span class="token operator">&gt;</span> print<span class="token punctuation">(</span><span class="token string">&#39;percent: {:.2f}%&#39;</span>.format<span class="token punctuation">(</span><span class="token number">42</span>/50*100<span class="token punctuation">))</span>\n    percent: <span class="token number">84.00</span>%\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ol><h2 id="_2-list-append-extend" tabindex="-1"><a class="header-anchor" href="#_2-list-append-extend" aria-hidden="true">#</a> 2. list (append extend)</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    mxt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span><span class="token punctuation">]</span>\n    mm <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span>, <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>\n\n    mxt.append<span class="token punctuation">(</span><span class="token string">&#39;d&#39;</span><span class="token punctuation">)</span>\n    <span class="token operator">&gt;</span> mxt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span>, <span class="token string">&#39;d&#39;</span><span class="token punctuation">]</span>\n\n    mxt.append<span class="token punctuation">(</span>mm<span class="token punctuation">)</span>\n    <span class="token operator">&gt;</span> mxt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span>, <span class="token punctuation">[</span><span class="token string">&#39;d&#39;</span>, <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span><span class="token punctuation">]</span>\n\n    mxt.extend<span class="token punctuation">(</span>mm<span class="token punctuation">)</span>\n    <span class="token operator">&gt;</span> mxt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">&#39;a&#39;</span>, <span class="token string">&#39;b&#39;</span>, <span class="token string">&#39;c&#39;</span>, <span class="token string">&#39;d&#39;</span>, <span class="token string">&#39;e&#39;</span><span class="token punctuation">]</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div><h2 id="_3-保存图片" tabindex="-1"><a class="header-anchor" href="#_3-保存图片" aria-hidden="true">#</a> 3. 保存图片</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    cat_img <span class="token operator">=</span> response<span class="token punctuation">.</span>content\n    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span>image_path<span class="token punctuation">,</span> <span class="token string">&#39;wb&#39;</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>\n        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>cat_img<span class="token punctuation">)</span>\n        f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_4-包的导入" tabindex="-1"><a class="header-anchor" href="#_4-包的导入" aria-hidden="true">#</a> 4. 包的导入</h2><p>对于不再当前文件的python模块, 导入方法</p><ul><li><p>被导入包:<br> 文件夹下创建 <strong>init</strong>.py</p></li><li><p>导入包:</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>model_dir <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>split<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span>__file__<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">&#39;aa/bb/&#39;</span><span class="token punctuation">)</span>\nsys<span class="token punctuation">.</span>path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>model_dir<span class="token punctuation">)</span>\n<span class="token keyword">from</span> my_model <span class="token keyword">import</span> model_or_function \n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li></ul><h2 id="_5-生成随机数" tabindex="-1"><a class="header-anchor" href="#_5-生成随机数" aria-hidden="true">#</a> 5. 生成随机数</h2><ul><li><p>js常用的, 生成一个时间戳 + 随机数</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token keyword">import</span> time\n    <span class="token keyword">import</span> random\n    cert <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">1000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">round</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;生成随机数: {}&#39;</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>cert<span class="token punctuation">)</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div></li></ul><h2 id="_6-加密" tabindex="-1"><a class="header-anchor" href="#_6-加密" aria-hidden="true">#</a> 6. 加密</h2><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    <span class="token keyword">import</span> hashlib\n    hl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>\n    hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>url<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">&#39;utf-8&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n    new <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div><h2 id="_7-del" tabindex="-1"><a class="header-anchor" href="#_7-del" aria-hidden="true">#</a> 7. del</h2><p>由于python都是引用，而python有GC机制，所以，del语句作用在变量上，而不是数据对象上。</p><div class="language-python ext-py line-numbers-mode"><pre class="language-python"><code>    a <span class="token operator">=</span> <span class="token number">1</span>\n    b <span class="token operator">=</span> a\n    c <span class="token operator">=</span> a\n    <span class="token keyword">del</span> a\n    <span class="token keyword">del</span> b\n    <span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>    <span class="token comment"># c == 1</span>\n    <span class="token comment"># 对于list</span>\n    li<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>  <span class="token comment">#列表本身不包含数据1,2,3,4,5，而是包含变量：li[0] li[1] li[2] li[3] li[4]</span>\n    first<span class="token operator">=</span>li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>     <span class="token comment">#拷贝列表，也不会有数据对象的复制，而是创建新的变量引用</span>\n    <span class="token keyword">del</span> li<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>li<span class="token punctuation">)</span>      <span class="token comment">#输出[2, 3, 4, 5]</span>\n    <span class="token keyword">print</span><span class="token punctuation">(</span>first<span class="token punctuation">)</span>   <span class="token comment">#输出 1</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_8-python执行shell命令" tabindex="-1"><a class="header-anchor" href="#_8-python执行shell命令" aria-hidden="true">#</a> 8. Python执行Shell命令</h2><ol><li><p>os 返回外部程序的运行结果</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token function">import</span> os\n    os.system<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li><li><p>popen() 返回一个类文件对象，调用read()或readline()可以输出内容</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token function">import</span> os\n    output <span class="token operator">=</span> os.popen<span class="token punctuation">(</span><span class="token string">&#39;ps -u root&#39;</span><span class="token punctuation">)</span>\n    print<span class="token punctuation">(</span>output<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>commands</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token function">import</span> commands\n    commands.getstatusoutput<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>\n    commands.getoutput<span class="token punctuation">(</span><span class="token string">&#39;ls&#39;</span><span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div></li><li><p>subprocess subprocess比os.system更灵活</p><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token function">import</span> subprocess\n    subprocess.call<span class="token punctuation">(</span><span class="token string">&#39;pwd&#39;</span>, <span class="token assign-left variable">shell</span><span class="token operator">=</span>True<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br></div></div></li></ol><h2 id="_9-enumerate-代替range" tabindex="-1"><a class="header-anchor" href="#_9-enumerate-代替range" aria-hidden="true">#</a> 9. enumerate 代替range</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token comment"># 为了同时获取索引和列表的值</span>\n    <span class="token keyword">for</span> <span class="token for-or-select variable">i</span> <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>my_list<span class="token punctuation">))</span>:\n        print<span class="token punctuation">(</span>i, my_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\n    \n    <span class="token comment"># 使用enumerate, i其实就是计数</span>\n    <span class="token keyword">for</span> i, item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>my_list<span class="token punctuation">)</span>:\n        print<span class="token punctuation">(</span>i, item<span class="token punctuation">)</span>\n\n    <span class="token comment"># 也可以指定i的开始值</span>\n    <span class="token comment"># i将从1开始</span>\n    <span class="token keyword">for</span> i, item <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>my_list， <span class="token number">1</span><span class="token punctuation">)</span>:\n        print<span class="token punctuation">(</span>i, item<span class="token punctuation">)</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br></div></div><h2 id="_10-zip平行遍历多个迭代器" tabindex="-1"><a class="header-anchor" href="#_10-zip平行遍历多个迭代器" aria-hidden="true">#</a> 10. zip平行遍历多个迭代器</h2><div class="language-bash ext-sh line-numbers-mode"><pre class="language-bash"><code>    <span class="token comment"># python3 zip相当于生成器，逐次产生元组</span>\n    <span class="token keyword">for</span> name, count <span class="token keyword">in</span> zip<span class="token punctuation">(</span>list_name, list_count<span class="token punctuation">)</span>:\n        print<span class="token punctuation">(</span>name, count<span class="token punctuation">)</span>\n    <span class="token comment"># 如果迭代器长度不一致，要使用itertool.zip_longest</span>\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br></div></div>',23),e={render:function(n,s){return p}}}}]);