"use strict";(self.webpackChunkxiaoteng=self.webpackChunkxiaoteng||[]).push([[517],{4458:(n,s,e)=>{e.r(s),e.d(s,{data:()=>a});const a={key:"v-b80b9bb4",path:"/python/python_basics/built_in_module/json.html",title:"JSON格式",lang:"en-US",frontmatter:{},excerpt:"",headers:[{level:2,title:"1. 序列化和反序列化",slug:"_1-序列化和反序列化",children:[]},{level:2,title:"2. 序列化其他",slug:"_2-序列化其他",children:[]},{level:2,title:"第三方 demjson",slug:"第三方-demjson",children:[]}],filePathRelative:"python/python_basics/built_in_module/json.md",git:{updatedTime:1631876121e3,contributors:[{name:"maxiaoteng",email:"jizhuwo00@hotmail.com",commits:1}]}}},3273:(n,s,e)=>{e.r(s),e.d(s,{default:()=>l});const a=(0,e(6252).uE)('<h1 id="json格式" tabindex="-1"><a class="header-anchor" href="#json格式" aria-hidden="true">#</a> JSON格式</h1><p>用于序列化, 内置包picking, 将变量序列化成bytes类型, 兼容差,仅适用Python</p><h2 id="_1-序列化和反序列化" tabindex="-1"><a class="header-anchor" href="#_1-序列化和反序列化" aria-hidden="true">#</a> 1. 序列化和反序列化</h2><ul><li>json默认支持序列化Python的数据类型: list, dict等<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import json\nd = dict(name=&#39;Bob&#39;, age=20, score=88)\n# 序列化\ns = json.dumps(d)\ns == &#39;{&quot;age&quot;: 20, &quot;score&quot;: 88, &quot;name&quot;: &quot;Bob&quot;}&#39;\n\ns = json.dumps(s, separators=(&#39;,&#39;, &#39;:&#39;), ensure_ascii=False)\n# separators 用来解决:后面带空格问题, ensure_ascii解决中文编码问题\n\n# 反序列化\nd = json.loads(s)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br></div></div></li></ul><h2 id="_2-序列化其他" tabindex="-1"><a class="header-anchor" href="#_2-序列化其他" aria-hidden="true">#</a> 2. 序列化其他</h2><ul><li>序列化类<div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>import json\n\nclass Student(object):\n    def __init__(self, name, age, score):\n        self.name = name\n        self.age = age\n        self.score = score\n\n\n# 实现一个方法用于序列化\ndef student2dict(std):\n    return {\n        &#39;name&#39;: std.name,\n        &#39;age&#39;: std.age,\n        &#39;score&#39;: std.score\n    }\n\n# 反序列化\ndef dict2student(self, d):\n    return Student(d[&#39;name&#39;], d[&#39;age&#39;], d[&#39;score&#39;])\n\ns = Student(&#39;Bob&#39;, 20, 88)\n# 便可序列化和反序列化对象\nstr = json.dumps(s, default=student2dict)\nstudent_class = json.loads(json_str, object_hook=dict2student)\n\n# 序列化的高阶写法\njson_s = json.dumps(s, default=lambda obj: obj.__dict__)\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br></div></div></li></ul><h2 id="第三方-demjson" tabindex="-1"><a class="header-anchor" href="#第三方-demjson" aria-hidden="true">#</a> 第三方 demjson</h2><p>http://deron.meranda.us/python/demjson/</p><ul><li>用于编码和解码json数据,</li></ul><div class="language-text ext-text line-numbers-mode"><pre class="language-text"><code>data = [ { &#39;a&#39; : 1, &#39;b&#39; : 2, &#39;c&#39; : 3, &#39;d&#39; : 4, &#39;e&#39; : 5 } ]\njson = demjson.encode(data)\n&gt;&gt; data == [{&quot;a&quot;:1,&quot;b&quot;:2,&quot;c&quot;:3,&quot;d&quot;:4,&quot;e&quot;:5}]\ntext = demjson.decode(json)\n&gt;&gt; {&#39;a&#39;: 1, &#39;c&#39;: 3, &#39;b&#39;: 2, &#39;e&#39;: 5, &#39;d&#39;: 4}\n</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br></div></div>',10),l={render:function(n,s){return a}}}}]);